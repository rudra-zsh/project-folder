// lib/ReactFileManager.tsx
import React10, { useState as useState2 } from "react";

// lib/context/FileManagerContext.tsx
import { createContext, useContext } from "react";
var FileManagerContext = createContext(null);
var useFileManager = () => {
  const context = useContext(FileManagerContext);
  if (!context) {
    throw new Error("useFileManager must be used within FileManagerProvider");
  }
  return context;
};

// lib/components/Navbar.tsx
import React, { useMemo } from "react";
var Navbar = () => {
  const { fs, setCurrentFolder, onRefresh } = useFileManager();
  const initialFolders = useMemo(() => {
    return fs.filter((f) => f.isDir && f.parentId === "0");
  }, [fs]);
  const handleClick = async (id) => {
    setCurrentFolder(id);
    if (onRefresh !== void 0) {
      try {
        await onRefresh(id);
      } catch (e) {
        throw new Error("Error during refresh");
      }
    }
  };
  return /* @__PURE__ */ React.createElement("section", { className: "rfm-navbar" }, /* @__PURE__ */ React.createElement(
    "span",
    {
      onClick: () => setCurrentFolder("0"),
      className: "rfm-navbar-root-link"
    },
    "Root"
  ), /* @__PURE__ */ React.createElement("ul", { className: "rfm-navbar-list" }, initialFolders.map((f) => {
    return /* @__PURE__ */ React.createElement(
      "li",
      {
        onClick: () => handleClick(f.id),
        className: "rfm-navbar-list-element",
        key: f.id
      },
      f.name
    );
  })));
};
var Navbar_default = Navbar;

// lib/components/Workspace.tsx
import React9, { useState, useMemo as useMemo4, useCallback, useEffect } from "react";
import { useDropzone } from "react-dropzone";

// lib/types/Enums.ts
var ViewStyle = /* @__PURE__ */ ((ViewStyle2) => {
  ViewStyle2["List"] = "list";
  ViewStyle2["Icons"] = "icons";
  return ViewStyle2;
})(ViewStyle || {});

// lib/components/FileIcon.tsx
import React3 from "react";
import { useMemo as useMemo2 } from "react";

// lib/components/SvgIcon.tsx
import React2 from "react";
var SvgIcon = ({
  svgType,
  ...props
}) => {
  const svgContent = () => {
    switch (svgType) {
      case "file": {
        return /* @__PURE__ */ React2.createElement(
          "svg",
          {
            version: "1",
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 48 48",
            enableBackground: "new 0 0 48 48"
          },
          /* @__PURE__ */ React2.createElement("polygon", { fill: "#90CAF9", points: "40,45 8,45 8,3 30,3 40,13" }),
          /* @__PURE__ */ React2.createElement("polygon", { fill: "#E1F5FE", points: "38.5,14 29,14 29,4.5" })
        );
      }
      case "folder": {
        return /* @__PURE__ */ React2.createElement(
          "svg",
          {
            version: "1",
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 48 48",
            enableBackground: "new 0 0 48 48"
          },
          /* @__PURE__ */ React2.createElement(
            "path",
            {
              fill: "#FFA000",
              d: "M40,12H22l-4-4H8c-2.2,0-4,1.8-4,4v8h40v-4C44,13.8,42.2,12,40,12z"
            }
          ),
          /* @__PURE__ */ React2.createElement(
            "path",
            {
              fill: "#FFCA28",
              d: "M40,12H8c-2.2,0-4,1.8-4,4v20c0,2.2,1.8,4,4,4h32c2.2,0,4-1.8,4-4V16C44,13.8,42.2,12,40,12z"
            }
          )
        );
      }
      case "arrow-up": {
        return /* @__PURE__ */ React2.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "currentColor", viewBox: "0 0 1024 1024" }, /* @__PURE__ */ React2.createElement("path", { d: "M868 545.5L536.1 163a31.96 31.96 0 0 0-48.3 0L156 545.5a7.97 7.97 0 0 0 6 13.2h81c4.6 0 9-2 12.1-5.5L474 300.9V864c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V300.9l218.9 252.3c3 3.5 7.4 5.5 12.1 5.5h81c6.8 0 10.5-8 6-13.2z" }));
      }
      case "arrow-down": {
        return /* @__PURE__ */ React2.createElement("svg", { stroke: "currentColor", fill: "currentColor", strokeWidth: "0", viewBox: "0 0 1024 1024", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ React2.createElement("path", { d: "M862 465.3h-81c-4.6 0-9 2-12.1 5.5L550 723.1V160c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v563.1L255.1 470.8c-3-3.5-7.4-5.5-12.1-5.5h-81c-6.8 0-10.5 8.1-6 13.2L487.9 861a31.96 31.96 0 0 0 48.3 0L868 478.5c4.5-5.2.8-13.2-6-13.2z" }));
      }
      case "close": {
        return /* @__PURE__ */ React2.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 1024 1024" }, /* @__PURE__ */ React2.createElement("path", { d: "M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 0 0 203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z" }));
      }
      case "list": {
        return /* @__PURE__ */ React2.createElement("svg", { stroke: "currentColor", fill: "currentColor", strokeWidth: "0", viewBox: "0 0 256 256", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ React2.createElement("path", { d: "M80,64a8,8,0,0,1,8-8H216a8,8,0,0,1,0,16H88A8,8,0,0,1,80,64Zm136,56H88a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Zm0,64H88a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16ZM44,52A12,12,0,1,0,56,64,12,12,0,0,0,44,52Zm0,64a12,12,0,1,0,12,12A12,12,0,0,0,44,116Zm0,64a12,12,0,1,0,12,12A12,12,0,0,0,44,180Z" }));
      }
      case "icons": {
        return /* @__PURE__ */ React2.createElement("svg", { stroke: "currentColor", fill: "currentColor", strokeWidth: "0", viewBox: "0 0 256 256", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ React2.createElement("path", { d: "M72,60A12,12,0,1,1,60,48,12,12,0,0,1,72,60Zm56-12a12,12,0,1,0,12,12A12,12,0,0,0,128,48Zm68,24a12,12,0,1,0-12-12A12,12,0,0,0,196,72ZM60,116a12,12,0,1,0,12,12A12,12,0,0,0,60,116Zm68,0a12,12,0,1,0,12,12A12,12,0,0,0,128,116Zm68,0a12,12,0,1,0,12,12A12,12,0,0,0,196,116ZM60,184a12,12,0,1,0,12,12A12,12,0,0,0,60,184Zm68,0a12,12,0,1,0,12,12A12,12,0,0,0,128,184Zm68,0a12,12,0,1,0,12,12A12,12,0,0,0,196,184Z" }));
      }
      default: {
        return "";
      }
    }
  };
  return /* @__PURE__ */ React2.createElement("div", { ...props }, svgContent());
};
var SvgIcon_default = SvgIcon;

// lib/components/FileIcon.tsx
var FileIcon = (props) => {
  const { setCurrentFolder, onRefresh } = useFileManager();
  const handleClick = async () => {
    if (props.isDir) {
      setCurrentFolder(props.id);
      if (onRefresh !== void 0) {
        try {
          await onRefresh(props.id);
        } catch (e) {
          throw new Error("Error during refresh");
        }
      }
    }
  };
  const fileExtension = useMemo2(() => {
    if (!props.name.includes(".")) {
      return "";
    }
    const nameArray = props.name.split(".");
    return `.${nameArray[nameArray.length - 1]}`;
  }, [props.id]);
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement("div", { onClick: handleClick, className: "rfm-file-icon-container" }, /* @__PURE__ */ React3.createElement(
    SvgIcon_default,
    {
      svgType: props.isDir ? "folder" : "file",
      className: "rfm-file-icon-svg"
    }
  ), /* @__PURE__ */ React3.createElement("span", { className: "rfm-file-icon-extension" }, fileExtension), /* @__PURE__ */ React3.createElement("span", { className: "rfm-file-icon-name" }, props.name)));
};
var FileIcon_default = FileIcon;

// lib/components/NewFolderIcon.tsx
import React4 from "react";
var NewFolderIcon = ({
  onClick
}) => {
  return /* @__PURE__ */ React4.createElement("div", { onClick, className: "rfm-folder-icon-container" }, /* @__PURE__ */ React4.createElement("span", { className: "rfm-folder-icon-span" }, "+"));
};
var NewFolderIcon_default = NewFolderIcon;

// lib/components/FolderPath.tsx
import React5, { useMemo as useMemo3 } from "react";
var FolderPath = () => {
  const { fs, currentFolder, setCurrentFolder, viewStyle, setViewStyle } = useFileManager();
  const goUp = () => {
    const currentFolderInfo = fs.find((f) => f.id === currentFolder);
    if (currentFolderInfo && currentFolderInfo.parentId) {
      setCurrentFolder(currentFolderInfo.parentId);
    }
  };
  const parentPath = useMemo3(() => {
    const parentId = fs.find(
      (f) => f.id === currentFolder
    )?.parentId;
    if (!parentId) {
      return "";
    }
    const parentDir = fs.find((f) => f.id === parentId);
    if (!parentDir?.path) {
      return "";
    }
    const _parentPath = parentDir.path.slice(-1) === "/" ? parentDir.path : `${parentDir.path}/`;
    return _parentPath;
  }, [fs, currentFolder]);
  const currentPath = useMemo3(() => {
    const currentFolderInfo = fs.find((f) => f.id === currentFolder);
    return currentFolderInfo ? currentFolderInfo.name : "";
  }, [fs, currentFolder]);
  return /* @__PURE__ */ React5.createElement("div", { className: "rfm-workspace-header" }, /* @__PURE__ */ React5.createElement("div", { className: "rfm-folder-path-container" }, /* @__PURE__ */ React5.createElement(
    SvgIcon_default,
    {
      svgType: "arrow-up",
      onClick: goUp,
      className: "rfm-folder-path-svg"
    }
  ), /* @__PURE__ */ React5.createElement("span", { className: "rfm-folder-path-span" }, parentPath, /* @__PURE__ */ React5.createElement("b", null, currentPath))), /* @__PURE__ */ React5.createElement("div", { className: "rfm-header-container" }, /* @__PURE__ */ React5.createElement(
    SvgIcon_default,
    {
      svgType: "list",
      className: `rfm-header-icon ${viewStyle === "list" /* List */ && "rfm-header-icon--selected"}`,
      onClick: () => setViewStyle("list" /* List */)
    }
  ), /* @__PURE__ */ React5.createElement(
    SvgIcon_default,
    {
      svgType: "icons",
      className: `rfm-header-icon ${viewStyle === "icons" /* Icons */ && "rfm-header-icon--selected"}`,
      onClick: () => setViewStyle("icons" /* Icons */)
    }
  )));
};
var FolderPath_default = FolderPath;

// lib/components/NewFolderModal.tsx
import React7, { useRef } from "react";

// lib/components/CommonModal.tsx
import React6 from "react";
import Draggable from "react-draggable";
var CommonModal = ({
  children,
  title,
  isVisible,
  onClose
}) => {
  if (!isVisible) {
    return /* @__PURE__ */ React6.createElement(React6.Fragment, null);
  }
  return /* @__PURE__ */ React6.createElement(Draggable, { bounds: "#react-file-manager-workspace" }, /* @__PURE__ */ React6.createElement("div", { className: "rfm-modal-container" }, /* @__PURE__ */ React6.createElement("div", null, /* @__PURE__ */ React6.createElement("h3", { className: "rfm-modal-title" }, title), /* @__PURE__ */ React6.createElement(
    SvgIcon_default,
    {
      onClick: onClose,
      svgType: "close",
      className: "rfm-modal-icon"
    }
  )), children));
};
var CommonModal_default = CommonModal;

// lib/components/NewFolderModal.tsx
var NewFolderModal = (props) => {
  const { onCreateFolder } = useFileManager();
  const folderName = useRef();
  const onConfirm = async () => {
    if (folderName && folderName.current && folderName.current.value && folderName.current.value.length > 0 && onCreateFolder) {
      await onCreateFolder(folderName.current.value);
    }
  };
  return /* @__PURE__ */ React7.createElement(CommonModal_default, { title: "Create New Folder", ...props }, /* @__PURE__ */ React7.createElement("div", null, /* @__PURE__ */ React7.createElement("form", { className: "rfm-new-folder-modal-form" }, /* @__PURE__ */ React7.createElement("div", null, /* @__PURE__ */ React7.createElement(
    "input",
    {
      ref: folderName,
      type: "text",
      className: "rfm-new-folder-modal-input",
      placeholder: "Folder Name",
      required: true
    }
  )), /* @__PURE__ */ React7.createElement(
    "button",
    {
      onClick: onConfirm,
      disabled: folderName && folderName.current && folderName.current.value && folderName.current.value.length === 0,
      type: "submit",
      className: "rfm-new-folder-modal-btn"
    },
    "Create"
  ))));
};
var NewFolderModal_default = NewFolderModal;

// lib/components/UploadFileModal.tsx
import React8 from "react";
var UploadFileModal = (props) => {
  const { onUpload, uploadedFileData, currentFolder } = useFileManager();
  const onConfirm = async () => {
    if (onUpload && uploadedFileData) {
      await onUpload(uploadedFileData, currentFolder);
    }
  };
  return /* @__PURE__ */ React8.createElement(CommonModal_default, { title: "Upload file", ...props }, /* @__PURE__ */ React8.createElement("div", null, /* @__PURE__ */ React8.createElement("h4", { className: "rfm-upload-file-modal-title" }, "Are you sure you want to upload the file?"), /* @__PURE__ */ React8.createElement("div", { className: "rfm-upload-file-modal-container" }, /* @__PURE__ */ React8.createElement(
    "button",
    {
      onClick: onConfirm,
      type: "submit",
      className: "rfm-upload-file-modal-btn rfm-upload-file-modal-btn-confirm"
    },
    "Upload"
  ), /* @__PURE__ */ React8.createElement(
    "button",
    {
      onClick: props.onClose,
      type: "submit",
      className: "rfm-upload-file-modal-btn rfm-upload-file-modal-btn-cancel"
    },
    "Cancel"
  ))));
};
var UploadFileModal_default = UploadFileModal;

// lib/components/Workspace.tsx
import {
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  getSortedRowModel,
  useReactTable
} from "@tanstack/react-table";
var columnHelper = createColumnHelper();
var columns = [
  columnHelper.accessor("name", {
    header: () => "Name",
    cell: (info) => /* @__PURE__ */ React9.createElement("div", { className: "rfm-workspace-list-icon-td" }, /* @__PURE__ */ React9.createElement(SvgIcon_default, { svgType: info.row.original.isDir ? "folder" : "file", className: "rfm-workspace-list-icon" }), /* @__PURE__ */ React9.createElement("p", null, info.getValue()))
  }),
  columnHelper.accessor("lastModified", {
    header: () => "Last Modified",
    cell: (info) => info.getValue() ? new Date(info.getValue() * 1e3).toLocaleString() : "N/A"
  })
];
var Workspace = () => {
  const { currentFolder, fs, viewStyle, viewOnly, setCurrentFolder, setUploadedFileData, onDoubleClick, onRefresh } = useFileManager();
  const [newFolderModalVisible, setNewFolderModalVisible] = useState(false);
  const [uploadFileModalVisible, setUploadFileModalVisible] = useState(false);
  const setUploadModalVisible = (value) => {
    if (viewOnly) {
      setUploadFileModalVisible(false);
    } else {
      setUploadFileModalVisible(value);
    }
  };
  useEffect(() => {
    if (newFolderModalVisible) {
      setNewFolderModalVisible(false);
    }
    if (uploadFileModalVisible) {
      setUploadModalVisible(false);
      setUploadedFileData(void 0);
    }
  }, [currentFolder]);
  const onDrop = useCallback(
    (acceptedFiles) => {
      const file = acceptedFiles[0];
      setUploadedFileData(file);
      setUploadModalVisible(true);
    },
    [setUploadedFileData]
  );
  const onCloseUploadFileModal = () => {
    setUploadModalVisible(false);
    setUploadedFileData(void 0);
  };
  const { getRootProps, isDragAccept } = useDropzone({
    noClick: true,
    noKeyboard: true,
    onDrop
  });
  const currentFolderFiles = useMemo4(() => {
    const files = fs.filter((f) => f.parentId === currentFolder);
    return files;
  }, [fs, currentFolder]);
  const table = useReactTable({
    data: currentFolderFiles,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    initialState: {
      sorting: [{ id: "name", desc: false }]
    }
  });
  const handleClick = async (file) => {
    if (file.isDir) {
      setCurrentFolder(file.id);
      if (onRefresh !== void 0) {
        try {
          await onRefresh(file.id);
        } catch (e) {
          throw new Error("Error during refresh");
        }
      }
    }
  };
  const handleDoubleClick = (id) => {
    if (onDoubleClick) {
      onDoubleClick(id);
    }
  };
  return /* @__PURE__ */ React9.createElement(
    "section",
    {
      id: "react-file-manager-workspace",
      className: `rfm-workspace ${isDragAccept && !viewOnly ? "rfm-workspace-dropzone" : ""}`,
      ...getRootProps()
    },
    /* @__PURE__ */ React9.createElement(FolderPath_default, null),
    /* @__PURE__ */ React9.createElement("div", { className: "rfm-workspace-file-listing" }, viewStyle === "icons" /* Icons */ && /* @__PURE__ */ React9.createElement(React9.Fragment, null, currentFolderFiles.map(
      (f, key) => {
        return /* @__PURE__ */ React9.createElement("button", { onDoubleClick: () => handleDoubleClick(f.id), key }, /* @__PURE__ */ React9.createElement(FileIcon_default, { id: f.id, name: f.name, isDir: f.isDir }));
      }
    ), !viewOnly && /* @__PURE__ */ React9.createElement(NewFolderIcon_default, { onClick: () => setNewFolderModalVisible(true) })), viewStyle === "list" /* List */ && /* @__PURE__ */ React9.createElement(React9.Fragment, null, /* @__PURE__ */ React9.createElement("table", { className: "w-full" }, /* @__PURE__ */ React9.createElement("thead", null, table.getHeaderGroups().map((headerGroup) => /* @__PURE__ */ React9.createElement("tr", { key: headerGroup.id }, headerGroup.headers.map((header) => /* @__PURE__ */ React9.createElement("th", { className: "rfm-workspace-list-th", key: header.id, onClick: header.column.getToggleSortingHandler() }, /* @__PURE__ */ React9.createElement("div", { className: "rfm-workspace-list-th-content" }, flexRender(header.column.columnDef.header, header.getContext()), header.column.getIsSorted() ? header.column.getIsSorted() === "desc" ? /* @__PURE__ */ React9.createElement(SvgIcon_default, { svgType: "arrow-down", className: "rfm-header-sort-icon" }) : /* @__PURE__ */ React9.createElement(SvgIcon_default, { svgType: "arrow-up", className: "rfm-header-sort-icon" }) : "")))))), /* @__PURE__ */ React9.createElement("tbody", null, table.getRowModel().rows.map((row) => /* @__PURE__ */ React9.createElement("tr", { key: row.id, className: "rfm-workspace-list-icon-row" }, row.getVisibleCells().map((cell) => /* @__PURE__ */ React9.createElement("td", { className: "rfm-workspace-list-align-txt", key: cell.id, onClick: () => handleClick(row.original), onDoubleClick: () => handleDoubleClick(row.original.id) }, flexRender(cell.column.columnDef.cell, cell.getContext()))))))), !viewOnly && /* @__PURE__ */ React9.createElement("button", { className: "rfm-workspace-list-add-folder", onClick: () => setNewFolderModalVisible(true) }, "Add Folder")), !viewOnly && /* @__PURE__ */ React9.createElement(React9.Fragment, null, /* @__PURE__ */ React9.createElement(
      NewFolderModal_default,
      {
        isVisible: newFolderModalVisible,
        onClose: () => setNewFolderModalVisible(false)
      }
    ), /* @__PURE__ */ React9.createElement(
      UploadFileModal_default,
      {
        isVisible: uploadFileModalVisible,
        onClose: onCloseUploadFileModal
      }
    )))
  );
};
var Workspace_default = Workspace;

// lib/ReactFileManager.tsx
var ReactFileManager = ({
  fs,
  viewOnly,
  onDoubleClick,
  onRefresh,
  onUpload,
  onCreateFolder,
  onDelete
}) => {
  const [currentFolder, setCurrentFolder] = useState2("0");
  const [uploadedFileData, setUploadedFileData] = useState2();
  const [viewStyle, setViewStyle] = useState2("list" /* List */);
  return /* @__PURE__ */ React10.createElement(
    FileManagerContext.Provider,
    {
      value: {
        fs,
        viewStyle,
        setViewStyle,
        viewOnly,
        currentFolder,
        setCurrentFolder,
        onDoubleClick,
        onRefresh,
        onUpload,
        onCreateFolder,
        onDelete,
        uploadedFileData,
        setUploadedFileData
      }
    },
    /* @__PURE__ */ React10.createElement("div", { className: "rfm-main-container" }, /* @__PURE__ */ React10.createElement(Navbar_default, null), /* @__PURE__ */ React10.createElement(Workspace_default, null))
  );
};
export {
  ReactFileManager,
  ViewStyle
};
